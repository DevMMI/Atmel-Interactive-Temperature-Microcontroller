
Simulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000270  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000388  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d2  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7c  00000000  00000000  000019e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a15  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082c  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e7  00000000  00000000  00003ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003daf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e7       	ldi	r30, 0x70	; 112
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 31       	cpi	r26, 0x14	; 20
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  b2:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
  ba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <system_init>
  be:	08 95       	ret

000000c0 <main>:
*/

int main(void){

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  c0:	0e 94 5d 00 	call	0xba	; 0xba <atmel_start_init>

	/* Initializing ADC  */
	ADC_0_init();
  c4:	0e 94 ab 00 	call	0x156	; 0x156 <ADC_0_init>
	uint16_t desired_temp_volts;
	char *message;
	
// Setup Pins
	// Buttons
	DDRA &= ~(0x09); // set pin 0,3 to input (button1_pin0, button2_pin3)
  c8:	81 b1       	in	r24, 0x01	; 1
  ca:	86 7f       	andi	r24, 0xF6	; 246
  cc:	81 b9       	out	0x01, r24	; 1
	
	// heater (pin0) and AC unit (pin3) && temperature sensor MCP9700 and ADC
	DDRB |= (0x09); // set pin 0,3 to output (heater0 and AC_unit3)
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	89 60       	ori	r24, 0x09	; 9
  d2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << 6); //  pin 6 to input (temperature sensor)
  d4:	26 98       	cbi	0x04, 6	; 4
	// temperature sensor MCP9700 maps to channel AIN[16] for ADC
	PORTB = 0x00; // set low
  d6:	15 b8       	out	0x05, r1	; 5
	
// Loop
	// initial poll of buttons
	old_state_btn_one = (PINA & (0x01));
  d8:	80 b1       	in	r24, 0x00	; 0
  da:	81 70       	andi	r24, 0x01	; 1
  dc:	e8 2e       	mov	r14, r24
	old_state_btn_two = (PINA) & (0x08);
  de:	80 b1       	in	r24, 0x00	; 0
  e0:	88 70       	andi	r24, 0x08	; 8
  e2:	f8 2e       	mov	r15, r24
	uint8_t old_state_btn_two;
	uint8_t state_btn_one;
	uint8_t state_btn_two;
	uint8_t msg;
	uint16_t actual_temperature_volts;
	uint16_t desired_temperature = 25;
  e4:	09 e1       	ldi	r16, 0x19	; 25
  e6:	10 e0       	ldi	r17, 0x00	; 0
	old_state_btn_two = (PINA) & (0x08);

	while (1) {
		
		// read buttons, decrement/increment desired temperature using the 2
		state_btn_one = (PINA & (0x01));
  e8:	d0 b1       	in	r29, 0x00	; 0
  ea:	d1 70       	andi	r29, 0x01	; 1
		state_btn_two = (PINA & (0x08));
  ec:	c0 b1       	in	r28, 0x00	; 0
  ee:	c8 70       	andi	r28, 0x08	; 8
		if((old_state_btn_one & (0x01)) != (state_btn_one & (0x01))){
  f0:	ed 16       	cp	r14, r29
  f2:	31 f0       	breq	.+12     	; 0x100 <main+0x40>
			// increment desired temperature
			message = "Temperature Incremented\r\n";
			msg = (uint8_t)(message[0]);
			RS232_write(msg);
  f4:	84 e5       	ldi	r24, 0x54	; 84
  f6:	0e 94 0f 01 	call	0x21e	; 0x21e <RS232_write>
			desired_temperature += 1;
  fa:	0f 5f       	subi	r16, 0xFF	; 255
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
			old_state_btn_one = (state_btn_one);
  fe:	ed 2e       	mov	r14, r29
		}
		if((old_state_btn_two & (0x08)) != (state_btn_two & (0x08))){
 100:	fc 16       	cp	r15, r28
 102:	31 f0       	breq	.+12     	; 0x110 <main+0x50>
			// decrement desired temperature
			message = "Temperature Decremented\r\n";
			msg = (uint8_t)(message[0]);
			RS232_write(msg);
 104:	84 e5       	ldi	r24, 0x54	; 84
 106:	0e 94 0f 01 	call	0x21e	; 0x21e <RS232_write>
			desired_temperature -= 1;			
 10a:	01 50       	subi	r16, 0x01	; 1
 10c:	11 09       	sbc	r17, r1
			old_state_btn_two = (state_btn_two);
 10e:	fc 2e       	mov	r15, r28
		}
		
		// calculate desired temperature in voltage (MCP9700 Data Sheet pg 2)
		// 500 mV = 0°C, 10mV/1°C in addition
		// we'll assume fan shouldn't be operating below freezing
		desired_temp_volts = 500 + (desired_temperature * 10); // Units: mV
 110:	c8 01       	movw	r24, r16
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	e8 01       	movw	r28, r16
 120:	cc 0f       	add	r28, r28
 122:	dd 1f       	adc	r29, r29
 124:	c8 0f       	add	r28, r24
 126:	d9 1f       	adc	r29, r25
 128:	cc 50       	subi	r28, 0x0C	; 12
 12a:	de 4f       	sbci	r29, 0xFE	; 254
		
		// read temperature from analog temperature sensor (MCP9700)
		actual_temperature_volts = ADC_0_get_conversion(16); // pin 6 for (temperature sensor), maps to channel AIN[16] for ADC Channel[Xplained datasheet pg29]
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <ADC_0_get_conversion>
		// Compare temperature to desired_temperature
		if (actual_temperature_volts > desired_temp_volts){
 132:	c8 17       	cp	r28, r24
 134:	d9 07       	cpc	r29, r25
 136:	30 f4       	brcc	.+12     	; 0x144 <main+0x84>
			//turn a heater on/off using a GPIO pin when temp falls below desired
			message = "Heater turned off, AC turned on\r\n";
			msg = (uint8_t)(message[0]);
			RS232_write(msg);
 138:	88 e4       	ldi	r24, 0x48	; 72
 13a:	0e 94 0f 01 	call	0x21e	; 0x21e <RS232_write>
			PORTB |= (0x01);
 13e:	28 9a       	sbi	0x05, 0	; 5
			PORTB &= ~(0x08);
 140:	2b 98       	cbi	0x05, 3	; 5
 142:	d2 cf       	rjmp	.-92     	; 0xe8 <main+0x28>
			
		}
		else if (actual_temperature_volts < desired_temp_volts){
 144:	8c 17       	cp	r24, r28
 146:	9d 07       	cpc	r25, r29
 148:	78 f6       	brcc	.-98     	; 0xe8 <main+0x28>
			// turn AC unit on using a GPIO pin when temp rises above desired
			message = "AC turned off, Heater turned on\r\n";
			msg = (uint8_t)(message[0]);
			RS232_write(msg);
 14a:	81 e4       	ldi	r24, 0x41	; 65
 14c:	0e 94 0f 01 	call	0x21e	; 0x21e <RS232_write>
			PORTB |= (0x08);
 150:	2b 9a       	sbi	0x05, 3	; 5
			PORTB &= ~(0x01);
 152:	28 98       	cbi	0x05, 0	; 5
 154:	c9 cf       	rjmp	.-110    	; 0xe8 <main+0x28>

00000156 <ADC_0_init>:
	ADCSRA |= (1 << ADEN);
}

void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
 156:	e4 e6       	ldi	r30, 0x64	; 100
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	80 83       	st	Z, r24
 160:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 164:	81 e8       	ldi	r24, 0x81	; 129
 166:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 16a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret

00000172 <ADC_0_start_conversion>:
}

void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x1f;
 172:	ec e7       	ldi	r30, 0x7C	; 124
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 81       	ld	r25, Z
 178:	90 7e       	andi	r25, 0xE0	; 224
 17a:	90 83       	st	Z, r25
	ADMUX |= channel;
 17c:	90 81       	ld	r25, Z
 17e:	89 2b       	or	r24, r25
 180:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <ADC_0_is_conversion_done>:
}

bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
 18e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
 192:	82 95       	swap	r24
 194:	81 70       	andi	r24, 0x01	; 1
 196:	08 95       	ret

00000198 <ADC_0_get_conversion_result>:

adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
 198:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 19c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
}
 1a2:	92 2b       	or	r25, r18
 1a4:	08 95       	ret

000001a6 <ADC_0_get_conversion>:

adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 1a6:	0e 94 b9 00 	call	0x172	; 0x172 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 1aa:	0e 94 c7 00 	call	0x18e	; 0x18e <ADC_0_is_conversion_done>
 1ae:	88 23       	and	r24, r24
 1b0:	e1 f3       	breq	.-8      	; 0x1aa <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 1b2:	0e 94 cc 00 	call	0x198	; 0x198 <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
 1b6:	ea e7       	ldi	r30, 0x7A	; 122
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	20 81       	ld	r18, Z
 1bc:	20 61       	ori	r18, 0x10	; 16
 1be:	20 83       	st	Z, r18
	return res;
}
 1c0:	08 95       	ret

000001c2 <USART_ASYNC_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 1c2:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 1c4:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1c6:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1c8:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_ASYNC_init();
 1ca:	0e 94 12 01 	call	0x224	; 0x224 <USART_ASYNC_init>
 1ce:	08 95       	ret

000001d0 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR0 = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART1)
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
 1d6:	91 b1       	in	r25, 0x01	; 1
 1d8:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
 1da:	92 b1       	in	r25, 0x02	; 2
 1dc:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 1de:	94 b1       	in	r25, 0x04	; 4
 1e0:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 1e2:	95 b1       	in	r25, 0x05	; 5
 1e4:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 1e6:	97 b1       	in	r25, 0x07	; 7
 1e8:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
 1ea:	98 b1       	in	r25, 0x08	; 8
 1ec:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 1ee:	9a b1       	in	r25, 0x0a	; 10
 1f0:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 1f2:	9b b1       	in	r25, 0x0b	; 11
 1f4:	8b b9       	out	0x0b, r24	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	60 e8       	ldi	r22, 0x80	; 128
 1fa:	81 e6       	ldi	r24, 0x61	; 97
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 08 01 	call	0x210	; 0x210 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 202:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 204:	15 be       	out	0x35, r1	; 53

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
 206:	0e 94 ab 00 	call	0x156	; 0x156 <ADC_0_init>

	sysctrl_init();

	ADC_0_initialization();

	USART_ASYNC_initialization();
 20a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <USART_ASYNC_initialization>
 20e:	08 95       	ret

00000210 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 210:	2f b7       	in	r18, 0x3f	; 63
	cli
 212:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 214:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 216:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 218:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 21a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 21c:	08 95       	ret

0000021e <RS232_write>:
#include <atmel_start_pins.h>
uint8_t read_byte;

void RS232_write(uint8_t data)
{
	USART_ASYNC_write((const uint8_t)data);
 21e:	0e 94 29 01 	call	0x252	; 0x252 <USART_ASYNC_write>
 222:	08 95       	ret

00000224 <USART_ASYNC_init>:
uint8_t USART_ASYNC_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 224:	e4 e6       	ldi	r30, 0x64	; 100
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	8d 7f       	andi	r24, 0xFD	; 253
 22c:	80 83       	st	Z, r24
 22e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 232:	83 e3       	ldi	r24, 0x33	; 51
 234:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 238:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 23c:	88 e9       	ldi	r24, 0x98	; 152
 23e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>
 24a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret

00000252 <USART_ASYNC_write>:

void USART_ASYNC_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 252:	e0 ec       	ldi	r30, 0xC0	; 192
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	95 ff       	sbrs	r25, 5
 25a:	fd cf       	rjmp	.-6      	; 0x256 <USART_ASYNC_write+0x4>
		;
	UDR0 = data;
 25c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 260:	08 95       	ret

00000262 <USART_ASYNC_printCHAR>:

#if defined(__GNUC__)

int USART_ASYNC_printCHAR(char character, FILE *stream)
{
	USART_ASYNC_write(character);
 262:	0e 94 29 01 	call	0x252	; 0x252 <USART_ASYNC_write>
	return 0;
}
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
